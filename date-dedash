#!/bin/bash

display_usage() {
  echo
  echo "date-dedash v0.1.0"
  echo "Copyright (C) 2017-2019 by Taylor Ralston"
  echo "Usage: $(basename $0) [-n] [file ...]"
  echo "Options"
  echo " -h, --help             Display this help message."
  echo " -n, --dry-run          Performs a dry run, i.e. output without the backup (log files will"
  echo "     --version          Displays the version"
  echo
  echo "For more detailed help, please see the README file:"
  echo
  echo "https://github.com/tralston/date-dedash/blob/master/README.md"
  echo
}

SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
ret=0
PARAMS=""

if [ $# -eq 0 ]; then
  display_usage
  exit 0
fi

# Process arguments, if any
while (( "$#" )); do
  case "$1" in
    -h|--help)
      display_usage
      exit 0
      ;;
    -n|--dry-run)
      DRY_RUN="true"
      shift
      ;;
    *) # Preserve positional parameters
      PARAMS="$PARAMS \"$1\""
      shift
      ;;
  esac
done

# Set positional parameters to their place in $0..$n
eval set -- "$PARAMS"

for f in $*
do
  if [ ! -f "$f" ]; then
    echo "date-dedash: no such file '$f'"
    ret=1
    continue
  fi
  echo "Processing $f ..."
  if [[ ( $f =~ ^([0-9]{4})-?([0-9]{2})-?([0-9]{2})\ *(-\ *)?(.*)$ ) ]] # Has an 8 digit number, maybe date, at front
  then # echo "Congrats: File $f passes 8-digit number test."
    year=${BASH_REMATCH[1]}
    month=${BASH_REMATCH[2]}
    day=${BASH_REMATCH[3]}
    full_date=$year$month$day
    desc=${BASH_REMATCH[5]}
    # echo
    # echo "   Components: YEAR: ${year}, MONTH: ${month}, DAY: ${day}"
    # echo
    # echo "Performing date validation test..."
    if `gdate "+%Y%m%d" -d ${full_date} >/dev/null 2>&1`
    then # echo "Passed date validation."
      # echo "Proceeding to adjust creation/modification date."
      # echo "BASH_REMATCH: ${BASH_REMATCH}; full_date: $full_date"
      # echo "desc: $desc"
      if `mv $f "$full_date $desc"`
      then : # echo "   Success! $f was de-dashed."
      else { ERRCODE=$?; echo "Error code $ERRCODE. Exiting."; exit $ERRCODE; }
      fi
    else echo "Error: $f has an invalid date in filename."
    fi
  else echo "Error: $f needs date with format YYYYMMDD at beginning of filename with trailing space."
  fi
  
done
IFS=$SAVEIFS
exit $ret